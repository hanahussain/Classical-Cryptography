import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

public class WritePermutations {

    public static void main(String[] args) {
        String ciphertext = "RDRLOAEDDETKDNRSADTHDISAEEHTSROFAETHALHKFWIYMEMROSEEBMRNLSAOIVEDMTVESNOITSIOFREEHSTTESRNEINPTWIODLENHNLIASEEIICDHEWFSENLATUYTLHEVLYIVFAHDNECELRIEDTTHSLEEBHARODTEBTAAINSSNYEMYTHOOBTYHDARATEANRSVEUUOTANHBRTADNOGTEYSNEUCNDRIEONKOAASHETGSWDENDHRTAGYYONOEJREOVUSITLDITSEWEHHTRRBTABSOKIIHSWTESFEEAEHTLRASAYLIGMEANRHRAAAYDBRNASEFIEDEADELHBTSTACKSIHMRTEPPCNIENYDGEERNDAASSBDTRSJSWONONNODSIANRIFHDMLENEAWSAYRLTELSRIHIVENTENTAHGHCWTSDLDUNRROEMNRCOEADMOOOJEMMRRTRHNTDEEHRWDAILDIENGTLIIYRGIONTESJNSSMTOWNOARIESICETRNEOFTNDSLDEKGRINDINBTRROARBEHNAATHOSESOLREELVASRAESIARMWHEGEUTQICSLENIREENTWANRSEIHTEHOKSAAEWTNHNTIRKGAHELNSIRRIYEAEJSLNTMESNIAAEEERSHRSEORCRELVTEAESHHOTLEOGSHNYURBTREREOHREERTHELVCATIDWRFYRLNTONSNIAWITERAOSHNDHTEYEBDMTSISESRIHATSSDENASLOHEWLSEBNERDCONREFHRSTSAIIHAERFTESLSWBUYULOLYREAOHLTYNNDTAILWSRDNINEATRNFHEOOJSESAFRUIGYEYERDHBTDAADSCEFCRROAWASIRROHONDHTERDENUNALGCHISETGKNEACNSMULOLLAICIVFDORNUSOLICSSEADERHCTYSRFTEATMOOLOFNCIFDTLORREYPTFGITNEILBLHERSEIADENANUHETHSRUCEATMWSROFEIPHSRAERVODLSBTRYROERRHSSBRTEONSRTAAIBNHNAATSOIEIDTDVYEBSFENHEGRIOITSPRSSEELARMEDSNINHOEAFTEDEMGRMGSURRRVLEAEDSSWTOSRAOEHETHTLWAETEFHYLRLYIIEAMRYSLENDPREETSCRYATBUTOEBITHTMIASREOUAAGMTEARYLRLYOTNCRESHSRSSARAWEOLGIIBVNSIRADSEDSNYNYAAETRSEAEHRGTYNRXEHEECLDIDNTILFEORKGEHEVNOIHWYRTBONRBTRROARBEHNEATROAETRFONNEUHTIIORLERHSYGVENRITWBKTOCNAIERETHNHOTERHDASEYNBNRASAEMEEOARIHTKDROELDHGTOARTLEFEODNACHEIMDOTAADOIRKHIUDNDRGASBHXEDETEYEITILHNGKRRMSEHOAJMTEORHNTOOCTSHSSOWERNUMIAESIDMSPYEBRYLRANUUTCSHJESSCAUASNAPAEENEIDDPNSARHKUOTOAIRIRETFSSETLHOMBTTAEHEUFTOBDESESINANWODUFMAOOTESKSFINSIHRELTOBSMEROCEDSGNAENHALTADSILGEWNDILEFSSWRRUAEASIDDNNINDUKIOIESITITLEEHKIILNUDWLTGNRINAOEBRMEMODSAIMDAOFTLSONRLKEAFEONAABODSNEELWSSDBEMHRGITNTISDTRANXAELELGESNBIMTTICAHUWGERWLESTAXPTYHOARROLISWIGLNDDEGANIHNTSTWHTHACWRTSEAAASHUBOWONDELANORMCIALCMELDTIALICRMAOATNSLDSUYALUOOEONISVTRADWEICNSTYEENHFTIACRCHEATRJKLSBARSOAECEXMDRNEHHQUGNIECIDNEELNKSSSRENEISRDMPIRDOESUAERUNSUUEELFNNLNOFACKTTIUPSTNDIOTRESMUTUOTCADIESSEEREOQGNETBDCYMUIELRKELLOVCALDHGEOTHNWIEOITHWFRRLGRLDONSIRMAFONOEWHOLTTARYEUIGCOATSRFTWEDORWOKOPEEMTISVEIROLRAEOHISMHTENDITGHIFNENLIIOVEETOBTSIUAONOZWTWNOEDSEEIGSRUAOCRDFOATRUAESSHHSCEOEADMDRYAOERVTHUNNLKNARCADAOUEMHEFDNINMAAARHPTFDUOOWTTLGEENNEITYSTHOECHPUETU7000DOSTHDEACRNAASDDWANEAHYDKSTIELLEHRERILAAPITAPGYNLWSAHESGIINHRLEPTYGECROCASLSFEMKEARXOEQRPLIEURAUWESTOTBOSSOHORTULERTYBHREEEIUNATHTIAARWLHPTNBNTIOMLUWABDEDGNIIOERAHSTDCRURASOSTALSCHEGESATNONRDUNREEERVCIEEEHFRTUNQRLIAIROOCFCRNGARHOTSCACURSESAEHAKLRCDRTANOEDHAHRHRIIAKGNOWICADSUSESTREAMOSDPREESCTYPSOPEAHRIHEATSFAHETEYOVNAEAEBEHWSNOESDFKWER";

        // Define the key length (m)
        int keyLength = 9;

        // Output file name
        String outputFile = "permutations9.txt";

        try {
            FileWriter writer = new FileWriter(outputFile);

            // Generate all permutations for the current key length
            int[] permutation = new int[keyLength];
            Arrays.fill(permutation, -1); // Initialize permutation array with -1

            generatePermutations(ciphertext, keyLength, 0, permutation, writer);

            writer.close();
            System.out.println("Permutations written to " + outputFile);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void generatePermutations(String ciphertext, int keyLength, int index,
                                             int[] permutation, FileWriter writer) throws IOException {
        if (index == keyLength) {
            String decryptedText = decryptWithPermutation(ciphertext, keyLength, permutation);

            // Write the decrypted text to the file
            writer.write("Permutation: " + Arrays.toString(permutation) + "\n");
            writer.write("Decrypted Text: " + decryptedText + "\n\n");

            return;
        }

        for (int i = 0; i < keyLength; i++) {
            if (!isUsed(permutation, i)) {
                permutation[index] = i;
                generatePermutations(ciphertext, keyLength, index + 1, permutation, writer);
                permutation[index] = -1; // Reset for the next permutation
            }
        }
    }

    private static boolean isUsed(int[] permutation, int value) {
        for (int i : permutation) {
            if (i == value) {
                return true;
            }
        }
        return false;
    }

    private static String decryptWithPermutation(String ciphertext, int keyLength, int[] permutation) {
        char[] chars = ciphertext.toCharArray();
        int length = chars.length;

        StringBuilder decryptedText = new StringBuilder();

        for (int i = 0; i < length; i += keyLength) {
            for (int j = 0; j < keyLength; j++) {
                int index = i + permutation[j];
                if (index < length) {
                    decryptedText.append(chars[index]);
                }
            }
        }

        return decryptedText.toString();
    }
}
